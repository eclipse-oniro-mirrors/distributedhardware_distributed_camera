# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/ohos_var.gni")
import(
    "//foundation/distributedhardware/distributed_camera/distributedcamera.gni")

ohos_shared_library("distributed_camera_sink") {
  branch_protector_ret = "pac_ret"
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    boundary_sanitize = true
    integer_overflow = true
    ubsan = true
  }
  stack_protector_ret = true

  include_dirs = [
    "include/distributedcamera",
    "include/distributedcameramgr",
    "include/distributedcameramgr/callback",
    "include/distributedcameramgr/eventbus",
    "include/distributedcameramgr/interface",
    "include/distributedcameramgr/listener",
    "${common_path}/include/constants",
    "${common_path}/include/utils",
    "${innerkits_path}/native_cpp/camera_sink/include",
    "${innerkits_path}/native_cpp/camera_sink/include/callback",
    "${innerkits_path}/native_cpp/camera_source/include",
    "${innerkits_path}/native_cpp/camera_source/include/callback",
    "${services_path}/cameraservice/base/include",
    "${services_path}/cameraservice/cameraoperator/client/include",
    "${services_path}/cameraservice/cameraoperator/client/include/callback",
    "${services_path}/cameraservice/cameraoperator/client/include/listener",
    "${services_path}/cameraservice/cameraoperator/handler/include",
    "${services_path}/channel/include",
    "${services_path}/data_process/include/eventbus",
    "${services_path}/data_process/include/interfaces",
    "${services_path}/data_process/include/pipeline",
    "${services_path}/data_process/include/utils",
    "${feeding_smoother_path}/base",
    "${feeding_smoother_path}/derived",
    "${feeding_smoother_path}/utils",
  ]

  sources = [
    "${innerkits_path}/native_cpp/camera_source/src/distributed_camera_source_proxy.cpp",
    "${services_path}/cameraservice/base/src/dcamera_capture_info_cmd.cpp",
    "${services_path}/cameraservice/base/src/dcamera_channel_info_cmd.cpp",
    "${services_path}/cameraservice/base/src/dcamera_event_cmd.cpp",
    "${services_path}/cameraservice/base/src/dcamera_info_cmd.cpp",
    "${services_path}/cameraservice/base/src/dcamera_metadata_setting_cmd.cpp",
    "${services_path}/cameraservice/base/src/dcamera_open_info_cmd.cpp",
    "src/distributedcamera/dcamera_sink_callback_proxy.cpp",
    "src/distributedcamera/dcamera_sink_hidumper.cpp",
    "src/distributedcamera/distributed_camera_sink_service.cpp",
    "src/distributedcamera/distributed_camera_sink_stub.cpp",
    "src/distributedcameramgr/callback/dcamera_sink_controller_state_callback.cpp",
    "src/distributedcameramgr/callback/dcamera_sink_output_result_callback.cpp",
    "src/distributedcameramgr/dcamera_sink_access_control.cpp",
    "src/distributedcameramgr/dcamera_sink_controller.cpp",
    "src/distributedcameramgr/dcamera_sink_data_process.cpp",
    "src/distributedcameramgr/dcamera_sink_dev.cpp",
    "src/distributedcameramgr/dcamera_sink_output.cpp",
    "src/distributedcameramgr/dcamera_sink_service_ipc.cpp",
    "src/distributedcameramgr/eventbus/dcamera_frame_trigger_event.cpp",
    "src/distributedcameramgr/eventbus/dcamera_photo_output_event.cpp",
    "src/distributedcameramgr/eventbus/dcamera_post_authorization_event.cpp",
    "src/distributedcameramgr/eventbus/dcamera_video_output_event.cpp",
    "src/distributedcameramgr/listener/dcamera_sink_controller_channel_listener.cpp",
    "src/distributedcameramgr/listener/dcamera_sink_data_process_listener.cpp",
    "src/distributedcameramgr/listener/dcamera_sink_output_channel_listener.cpp",
  ]

  deps = [
    "${common_path}:distributed_camera_utils",
    "${services_path}/cameraservice/cameraoperator/client:distributed_camera_client",
    "${services_path}/cameraservice/cameraoperator/handler:distributed_camera_handler",
    "${services_path}/channel:distributed_camera_channel",
    "${services_path}/data_process:distributed_camera_data_process",
  ]

  defines = [
    "HI_LOG_ENABLE",
    "DH_LOG_TAG=\"dcamerasinksvr\"",
    "LOG_DOMAIN=0xD004150",
  ]

  if (build_variant == "root") {
    defines += [ "DUMP_DCAMERA_FILE" ]
  }

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libtokenid_sdk",
    "cJSON:cjson",
    "c_utils:utils",
    "camera_framework:camera_framework",
    "device_manager:devicemanagersdk",
    "device_security_level:dslm_sdk",
    "distributed_hardware_fwk:distributed_av_receiver",
    "distributed_hardware_fwk:distributedhardwareutils",
    "distributed_hardware_fwk:libdhfwk_sdk",
    "drivers_interface_distributed_camera:libdistributed_camera_provider_proxy_1.0",
    "drivers_peripheral_display:hdi_gralloc_client",
    "eventhandler:libeventhandler",
    "graphic_surface:surface",
    "hilog:libhilog",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  subsystem_name = "distributedhardware"

  part_name = "distributed_camera"
}
