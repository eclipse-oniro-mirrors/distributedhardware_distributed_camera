# Copyright (c) 2021-2024 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("//build/ohos_var.gni")
import(
    "//foundation/distributedhardware/distributed_camera/distributedcamera.gni")

ohos_shared_library("distributed_camera_source") {
  sanitize = {
    cfi = true
    cfi_cross_dso = true
    debug = false
    boundary_sanitize = true
    integer_overflow = true
    ubsan = true
  }
  stack_protector_ret = true

  include_dirs = [
    "include/distributedcamera",
    "include/distributedcameramgr",
    "include/distributedcameramgr/dcamerainterface",
    "include/distributedcameramgr/dcamerastate",
    "include/distributedcameramgr/dcameracontrol",
    "include/distributedcameramgr/dcameradata",
    "include/distributedcameramgr/dcameradata/feedingsmoother",
    "include/distributedcameramgr/dcameradata/feedingsmoother/base",
    "include/distributedcameramgr/dcameradata/feedingsmoother/derived",
    "include/distributedcameramgr/dcameradata/feedingsmoother/utils",
    "include/distributedcameramgr/dcamerahdf",
    "${common_path}/include/constants",
    "${common_path}/include/utils",
    "${innerkits_path}/native_cpp/camera_source/include",
    "${innerkits_path}/native_cpp/camera_sink/include",
    "${innerkits_path}/native_cpp/camera_sink/include/callback",
    "${innerkits_path}/native_cpp/camera_source/include/callback",
    "${services_path}/cameraservice/base/include",
    "${services_path}/channel/include",
    "${services_path}/cameraservice/cameraoperator/handler/include",
    "${services_path}/data_process/include/eventbus",
    "${services_path}/data_process/include/interfaces",
    "${services_path}/data_process/include/pipeline",
    "${services_path}/data_process/include/utils",
  ]

  sources = [
    "${innerkits_path}/native_cpp/camera_sink/src/distributed_camera_sink_proxy.cpp",
    "${services_path}/cameraservice/base/src/dcamera_capture_info_cmd.cpp",
    "${services_path}/cameraservice/base/src/dcamera_channel_info_cmd.cpp",
    "${services_path}/cameraservice/base/src/dcamera_event_cmd.cpp",
    "${services_path}/cameraservice/base/src/dcamera_info_cmd.cpp",
    "${services_path}/cameraservice/base/src/dcamera_metadata_setting_cmd.cpp",
    "${services_path}/cameraservice/base/src/dcamera_open_info_cmd.cpp",
    "src/distributedcamera/dcamera_service_state_listener.cpp",
    "src/distributedcamera/dcamera_source_callback_proxy.cpp",
    "src/distributedcamera/dcamera_source_hidumper.cpp",
    "src/distributedcamera/distributed_camera_source_service.cpp",
    "src/distributedcamera/distributed_camera_source_stub.cpp",
    "src/distributedcameramgr/dcamera_source_dev.cpp",
    "src/distributedcameramgr/dcamera_source_event.cpp",
    "src/distributedcameramgr/dcamera_source_service_ipc.cpp",
    "src/distributedcameramgr/dcameracontrol/dcamera_source_controller.cpp",
    "src/distributedcameramgr/dcameracontrol/dcamera_source_controller_channel_listener.cpp",
    "src/distributedcameramgr/dcameradata/dcamera_source_data_process.cpp",
    "src/distributedcameramgr/dcameradata/dcamera_source_input.cpp",
    "src/distributedcameramgr/dcameradata/dcamera_source_input_channel_listener.cpp",
    "src/distributedcameramgr/dcameradata/dcamera_stream_data_process.cpp",
    "src/distributedcameramgr/dcameradata/dcamera_stream_data_process_pipeline_listener.cpp",
    "src/distributedcameramgr/dcameradata/dcamera_stream_data_process_producer.cpp",
    "src/distributedcameramgr/dcameradata/feedingsmoother/base/ifeeding_smoother.cpp",
    "src/distributedcameramgr/dcameradata/feedingsmoother/base/time_statistician.cpp",
    "src/distributedcameramgr/dcameradata/feedingsmoother/derived/dcamera_feeding_smoother.cpp",
    "src/distributedcameramgr/dcameradata/feedingsmoother/derived/dcamera_time_statistician.cpp",
    "src/distributedcameramgr/dcameradata/feedingsmoother/feeding_smoother_listener.cpp",
    "src/distributedcameramgr/dcamerahdf/dcamera_hdf_operate.cpp",
    "src/distributedcameramgr/dcamerahdf/dcamera_provider_callback_impl.cpp",
    "src/distributedcameramgr/dcamerastate/dcamera_source_capture_state.cpp",
    "src/distributedcameramgr/dcamerastate/dcamera_source_config_stream_state.cpp",
    "src/distributedcameramgr/dcamerastate/dcamera_source_init_state.cpp",
    "src/distributedcameramgr/dcamerastate/dcamera_source_opened_state.cpp",
    "src/distributedcameramgr/dcamerastate/dcamera_source_regist_state.cpp",
    "src/distributedcameramgr/dcamerastate/dcamera_source_state_factory.cpp",
    "src/distributedcameramgr/dcamerastate/dcamera_source_state_machine.cpp",
  ]

  deps = [
    "${common_path}:distributed_camera_utils",
    "${innerkits_path}/native_cpp/camera_sink:distributed_camera_sink_sdk",
    "${services_path}/cameraservice/cameraoperator/handler:distributed_camera_handler",
    "${services_path}/channel:distributed_camera_channel",
    "${services_path}/data_process:distributed_camera_data_process",
  ]

  defines = [
    "HI_LOG_ENABLE",
    "DH_LOG_TAG=\"dcamerasourcesvr\"",
    "LOG_DOMAIN=0xD004150",
  ]

  if (build_variant == "root") {
    defines += [ "DUMP_DCAMERA_FILE" ]
  }

  if (!distributed_camera_common) {
    cflags = [ "-DDCAMERA_MMAP_RESERVE" ]
  }

  external_deps = [
    "access_token:libaccesstoken_sdk",
    "access_token:libtokenid_sdk",
    "av_codec:av_codec_client",
    "cJSON:cjson",
    "c_utils:utils",
    "camera_framework:camera_framework",
    "distributed_hardware_fwk:distributed_av_receiver",
    "distributed_hardware_fwk:distributedhardwareutils",
    "distributed_hardware_fwk:libdhfwk_sdk",
    "drivers_interface_distributed_camera:libdistributed_camera_provider_proxy_1.0",
    "eventhandler:libeventhandler",
    "graphic_surface:surface",
    "hdf_core:libhdi",
    "hdf_core:libpub_utils",
    "hicollie:libhicollie",
    "hilog:libhilog",
    "hitrace:hitrace_meter",
    "ipc:ipc_core",
    "safwk:system_ability_fwk",
    "samgr:samgr_proxy",
  ]

  subsystem_name = "distributedhardware"

  part_name = "distributed_camera"
}
